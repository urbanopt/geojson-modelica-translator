within {{ project_name }}.Loads.ETS;
{% raw %}model HeatPumpTrio
  "Model of a substation with heating, hot water, and cooling heat pumps"
  extends Buildings.DHC.ETS.BaseClasses.PartialETS(
    final typ=Buildings.DHC.Types.DistrictSystemType.CombinedGeneration5,
    final have_weaBus=false,
    have_chiWat=true,
    final have_heaWat=true,
    have_hotWat=false,
    final have_eleHea=true,
    final nFue=0,
    final have_eleCoo=true,
    final have_pum=true,
    final have_fan=false,
    nPorts_aHeaWat=1,
    nPorts_aChiWat=1);
  // SYSTEM GENERAL
  parameter Boolean have_varFloCon=true
    "Set to true for heat pumps with variable condenser flow"
    annotation (Evaluate=true);
  parameter Boolean have_varFloEva=true
    "Set to true for heat pumps with variable evaporator flow"
    annotation (Evaluate=true);
  parameter Real ratFloMin(
    max=1,
    min=0,
    unit="1")=0.3
    "Minimum condenser or evaporator mass flow rate (ratio to nominal)"
    annotation (Dialog(enable=have_varFloCon or have_varFloEva));
  parameter Modelica.Units.SI.Temperature TDisWatMin
    "District water minimum temperature"
    annotation (Dialog(group="DHC system"));
  parameter Modelica.Units.SI.Temperature TDisWatMax
    "District water maximum temperature"
    annotation (Dialog(group="DHC system"));
  parameter Modelica.Units.SI.TemperatureDifference dT_nominal(
    min=0)=5
    "Water temperature drop/increase across load and source-side HX (always positive)"
    annotation (Dialog(group="Nominal condition"));
  parameter Modelica.Units.SI.Temperature TChiWatSup_nominal=291.15
    "Chilled water supply temperature"
    annotation (Dialog(group="Nominal conditions"));
  final parameter Modelica.Units.SI.Temperature TChiWatRet_nominal=TChiWatSup_nominal+dT_nominal
    "Chilled water return temperature"
    annotation (Dialog(group="Nominal condition"));
  parameter Modelica.Units.SI.Temperature THeaWatSup_nominal=313.15
    "Heating water supply temperature"
    annotation (Dialog(group="Nominal condition"));
  final parameter Modelica.Units.SI.Temperature THeaWatRet_nominal=THeaWatSup_nominal-dT_nominal
    "Heating water return temperature"
    annotation (Dialog(group="Nominal condition"));
  parameter Modelica.Units.SI.Temperature THotWatSup_nominal=336.15
    "Hot water supply temperature"
    annotation (Dialog(group="Nominal condition",enable=have_hotWat));
  parameter Modelica.Units.SI.Temperature TColWat_nominal=288.15
    "Cold water temperature (for hot water production)"
    annotation (Dialog(group="Nominal condition",enable=have_hotWat));
  parameter Modelica.Units.SI.Pressure dp_nominal(
    displayUnit="Pa")=50000
    "Pressure difference at nominal flow rate (for each flow leg)"
    annotation (Dialog(group="Nominal condition"));
  final parameter Modelica.Units.SI.MassFlowRate mHeaWat_flow_nominal(
    min=0)=abs(
    QHeaWat_flow_nominal/cpBui_default/(THeaWatSup_nominal-THeaWatRet_nominal))
    "Heating water mass flow rate"
    annotation (Dialog(group="Nominal condition"));
  final parameter Modelica.Units.SI.MassFlowRate mChiWat_flow_nominal(
    min=0)=abs(
    QChiWat_flow_nominal/cpBui_default/(TChiWatSup_nominal-TChiWatRet_nominal))
    "Chilled water mass flow rate"
    annotation (Dialog(group="Nominal conditions"));
  final parameter Modelica.Units.SI.MassFlowRate mEvaHotWat_flow_nominal(
    min=0)=QHotWat_flow_nominal*(COPHotWat_nominal-1)/COPHotWat_nominal/cpSer_default/dT_nominal
    "Evaporator water mass flow rate of heat pump for hot water production"
    annotation (Dialog(group="Nominal condition",enable=have_hotWat));
  final parameter Modelica.Units.SI.MassFlowRate mSerWat_flow_nominal(
    min=0)=max(
    proHeaWat.mCon_flow_nominal+mEvaHotWat_flow_nominal,
    proChiWat.mCon_flow_nominal)
    "Service water mass flow rate"
    annotation (Dialog(group="Nominal condition"));
  constant Modelica.Units.SI.SpecificHeatCapacity cpBui_default=MediumBui.specificHeatCapacityCp(
    MediumBui.setState_pTX(
      p=MediumBui.p_default,
      T=MediumBui.T_default))
    "Specific heat capacity of the fluid";
  constant Modelica.Units.SI.SpecificHeatCapacity cpSer_default=MediumSer.specificHeatCapacityCp(
    MediumSer.setState_pTX(
      p=MediumSer.p_default,
      T=MediumSer.T_default))
    "Specific heat capacity of the fluid";
  // Heat pump for heating water production
  parameter Real COPHeaWat_nominal(
    unit="1")
    "COP of heat pump for heating water production"
    annotation (Dialog(group="Nominal condition"));
  // Heat pump for hot water production
  parameter Real COPHotWat_nominal(
    unit="1")
    "COP of heat pump for hot water production"
    annotation (Dialog(group="Nominal condition",enable=have_hotWat));
  // Heat pump for chilled water production
  parameter Real COPChiWat_nominal(
    unit="1")
    "COP of heat pump for hot water production"
    annotation (Dialog(group="Nominal condition",enable=have_chiWat));
  // District HX
  final parameter Modelica.Units.SI.MassFlowRate m1HexChi_flow_nominal(
    min=0)=abs(
    QChiWat_flow_nominal/cpSer_default/dT_nominal)
    "CHW HX primary mass flow rate"
    annotation (Dialog(group="Nominal condition"));
  final parameter Modelica.Units.SI.MassFlowRate m2HexChi_flow_nominal(
    min=0)=abs(
    QChiWat_flow_nominal/cpSer_default/(THeaWatSup_nominal-THeaWatRet_nominal))
    "CHW HX secondary mass flow rate"
    annotation (Dialog(group="Nominal condition"));
  // Dynamics
  parameter Modelica.Fluid.Types.Dynamics mixingVolumeEnergyDynamics=Modelica.Fluid.Types.Dynamics.FixedInitial
    "Formulation of energy balance for mixing volume at inlet and outlet"
    annotation (Dialog(tab="Dynamics"));
  // IO CONNECTORS
  Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uCoo
    "Cooling enable signal"
    annotation (Placement(transformation(extent={{-340,100},{-300,140}}),iconTransformation(extent={{-380,20},{-300,100}})));
  Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uHea
    "Heating enable signal"
    annotation (Placement(transformation(extent={{-340,140},{-300,180}}),iconTransformation(extent={{-380,60},{-300,140}})));
  Buildings.Controls.OBC.CDL.Interfaces.BooleanInput uSHW if have_hotWat
    "SHW production enable signal"
    annotation (Placement(transformation(extent={{-340,60},{-300,100}}),iconTransformation(extent={{-380,-20},{-300,60}})));
  Buildings.Controls.OBC.CDL.Interfaces.RealInput THeaWatSupSet(
    final unit="K",
    displayUnit="degC")
    "Heating water supply temperature set point"
    annotation (Placement(transformation(extent={{-340,20},{-300,60}}),iconTransformation(extent={{-380,-60},{-300,20}})));
  Buildings.Controls.OBC.CDL.Interfaces.RealInput THotWatSupSet(
    final unit="K",
    displayUnit="degC") if have_hotWat
    "Service hot water supply temperature set point"
    annotation (Placement(transformation(extent={{-20,-20},{20,20}},rotation=0,origin={-320,-40}),iconTransformation(extent={{-380,-140},{-300,-60}})));
  Buildings.Controls.OBC.CDL.Interfaces.RealInput TColWat(
    final unit="K",
    displayUnit="degC") if have_hotWat
    "Cold water temperature"
    annotation (Placement(transformation(extent={{-20,-20},{20,20}},rotation=0,origin={-320,-80}),iconTransformation(extent={{-40,-40},{40,40}},rotation=0,origin={-340,-140})));
  Buildings.Controls.OBC.CDL.Interfaces.RealInput QReqHotWat_flow(
    final unit="W") if have_hotWat
    "Service hot water load"
    annotation (Placement(transformation(extent={{-20,-20},{20,20}},rotation=0,origin={-320,-120}),iconTransformation(extent={{-40,-40},{40,40}},rotation=0,origin={-340,-180})));
  Buildings.Controls.OBC.CDL.Interfaces.RealInput TChiWatSupSet(
    final unit="K",
    displayUnit="degC")
    "Chilled water supply temperature set point"
    annotation (Placement(transformation(extent={{-340,-20},{-300,20}}),iconTransformation(extent={{-380,-100},{-300,-20}})));
  Buildings.Controls.OBC.CDL.Interfaces.RealOutput mHea_flow(
    final unit="kg/s")
    "District water mass flow rate used for heating service"
    annotation (Placement(transformation(extent={{300,-160},{340,-120}}),iconTransformation(extent={{300,-160},{380,-80}})));
  Buildings.Controls.OBC.CDL.Interfaces.RealOutput mCoo_flow(
    final unit="kg/s")
    "District water mass flow rate used for cooling service"
    annotation (Placement(transformation(extent={{300,-200},{340,-160}}),iconTransformation(extent={{300,-200},{380,-120}})));
  // COMPONENTS
  Buildings.Fluid.Delays.DelayFirstOrder volMix_a(
    redeclare final package Medium=MediumSer,
    final nPorts=4,
    final m_flow_nominal=mSerWat_flow_nominal,
    tau=600,
    final energyDynamics=mixingVolumeEnergyDynamics)
    "Mixing volume to break algebraic loops and to emulate the delay of the substation"
    annotation (Placement(transformation(extent={{-270,-360},{-250,-380}})));
  Buildings.Fluid.Delays.DelayFirstOrder volMix_b(
    redeclare final package Medium=MediumSer,
    final nPorts=4,
    final m_flow_nominal=mSerWat_flow_nominal,
    tau=600,
    final energyDynamics=mixingVolumeEnergyDynamics)
    "Mixing volume to break algebraic loops and to emulate the delay of the substation"
    annotation (Placement(transformation(extent={{250,-360},{270,-380}})));
  {% endraw %}{{ project_name }}.Loads.ETS.HeatPumpCooling proChiWat(
    {% raw %}redeclare final package Medium1=MediumSer,
    redeclare final package Medium2=MediumBui,
    final have_varFloEva=have_varFloEva,
    final COP_nominal=COPChiWat_nominal,
    final TCon_nominal=TDisWatMax+dT_nominal,
    final TEva_nominal=TChiWatSup_nominal,
    final Q2_flow_nominal=QChiWat_flow_nominal,
    final dT_nominal=dT_nominal,
    final dp1_nominal=dp_nominal,
    final dp2_nominal=dp_nominal,
    final allowFlowReversal1=allowFlowReversalSer,
    final allowFlowReversal2=allowFlowReversalBui)
    "Chilled water heat pump"
    annotation (Placement(transformation(extent={{-10,-326},{10,-346}})));
  Buildings.Fluid.Delays.DelayFirstOrder volHeaWatRet(
    redeclare final package Medium=MediumBui,
    final m_flow_nominal=proHeaWat.mCon_flow_nominal,
    tau=60,
    final energyDynamics=mixingVolumeEnergyDynamics,
    T_start=THeaWatSup_nominal,
    nPorts=3)
    "Mixing volume representing building HHW primary"
    annotation (Placement(transformation(extent={{-10,10},{10,-10}},rotation=90,origin={90,180})));
  Buildings.Fluid.Sensors.MassFlowRate senMasFloHeaWat(
    redeclare final package Medium=MediumBui,
    final allowFlowReversal=allowFlowReversalBui)
    "Heating water mass flow rate"
    annotation (Placement(transformation(extent={{-250,250},{-230,270}})));
  Buildings.Fluid.Delays.DelayFirstOrder volChiWatRet(
    redeclare final package Medium=MediumBui,
    final m_flow_nominal=proChiWat.mEva_flow_nominal,
    tau=60,
    final energyDynamics=mixingVolumeEnergyDynamics,
    T_start=TChiWatSup_nominal,
    nPorts=3)
    "Mixing volume representing building CHW primary"
    annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=-90,origin={86,-288})));
  Buildings.Fluid.Sensors.MassFlowRate senMasFloChiWat(
    redeclare final package Medium=MediumBui,
    final allowFlowReversal=allowFlowReversalBui)
    "Chilled water mass flow rate"
    annotation (Placement(transformation(extent={{-250,-110},{-230,-130}})));
  Buildings.Controls.OBC.CDL.Reals.MultiSum PPumHeaTot(
    final nin=2)
    "Total pump power for heating applications"
    annotation (Placement(transformation(extent={{190,410},{210,430}})));
  Buildings.Fluid.Sources.Boundary_pT bouHeaWat(
    redeclare final package Medium=MediumBui,
    nPorts=1)
    "Pressure boundary condition representing the expansion vessel"
    annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=-90,origin={60,150})));
  Buildings.Fluid.Sources.Boundary_pT bouChiWat(
    redeclare final package Medium=MediumBui,
    nPorts=1)
    "Pressure boundary condition representing the expansion vessel"
    annotation (Placement(transformation(extent={{30,-298},{50,-278}})));
  Buildings.Controls.OBC.CDL.Reals.MultiSum PPumCooTot(
    nin=1)
    "Total pump power for space cooling"
    annotation (Placement(transformation(extent={{190,370},{210,390}})));
  Buildings.Controls.OBC.CDL.Reals.MultiSum PPumTot(
    nin=2)
    "Total pump power"
    annotation (Placement(transformation(extent={{220,390},{240,410}})));
  Buildings.Fluid.Sensors.TemperatureTwoPort senTHeaWatSup(
    redeclare final package Medium=MediumBui,
    final allowFlowReversal=allowFlowReversalBui,
    final m_flow_nominal=mHeaWat_flow_nominal)
    "Heating water supply temperature"
    annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={140,260})));
  Buildings.Fluid.Sensors.TemperatureTwoPort senTChiWatSup(
    redeclare final package Medium=MediumBui,
    final allowFlowReversal=allowFlowReversalBui,
    final m_flow_nominal=mChiWat_flow_nominal)
    "Chilled water supply temperature"
    annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={140,-280})));
  Buildings.DHC.ETS.Combined.Subsystems.SwitchBox swiFlo(
    redeclare final package Medium=MediumSer,
    final m_flow_nominal=mSerWat_flow_nominal,
    dpValve_nominal=1e-4)
    "Flow switch box"
    annotation (Placement(transformation(extent={{-10,-390},{10,-370}})));
  Buildings.DHC.ETS.BaseClasses.Junction bypHeaWatSup(
    redeclare final package Medium=MediumBui,
    final m_flow_nominal=proHeaWat.mCon_flow_nominal*{1,-1,-1})
    "Bypass heating water (supply)"
    annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={100,260})));
  Buildings.DHC.ETS.BaseClasses.Junction bypHeaWatRet(
    redeclare final package Medium=MediumBui,
    final m_flow_nominal=proHeaWat.mCon_flow_nominal*{1,-1,1})
    "Bypass heating water (return)"
    annotation (Placement(transformation(extent={{10,10},{-10,-10}},rotation=0,origin={100,234})));
  Buildings.Controls.OBC.CDL.Logical.TrueFalseHold enaHea(
    trueHoldDuration=15*60)
    "Enable heating"
    annotation (Placement(transformation(extent={{-140,150},{-120,170}})));
  Buildings.DHC.ETS.Combined.Subsystems.HeatPump proHeaWat(
    redeclare final package Medium1=MediumBui,
    redeclare final package Medium2=MediumSer,
    final have_varFloCon=have_varFloCon,
    final COP_nominal=COPHeaWat_nominal,
    final TCon_nominal=THeaWatSup_nominal,
    final TEva_nominal=TDisWatMin-dT_nominal,
    final Q1_flow_nominal=QHeaWat_flow_nominal,
    final allowFlowReversal1=allowFlowReversalBui,
    final allowFlowReversal2=allowFlowReversalSer,
    final dT_nominal=dT_nominal,
    final dp1_nominal=dp_nominal,
    final dp2_nominal=dp_nominal)
    "Subsystem for heating water production"
    annotation (Placement(transformation(extent={{-10,204},{10,224}})));
  Buildings.DHC.ETS.Combined.Subsystems.HeatPump proHotWat(
    redeclare final package Medium1=MediumBui,
    redeclare final package Medium2=MediumSer,
    final COP_nominal=COPHotWat_nominal,
    final TCon_nominal=THotWatSup_nominal,
    final TEva_nominal=TDisWatMin-dT_nominal,
    final Q1_flow_nominal=QHotWat_flow_nominal,
    final allowFlowReversal1=allowFlowReversalBui,
    final allowFlowReversal2=allowFlowReversalSer,
    final dT_nominal=dT_nominal,
    final dp1_nominal=dp_nominal,
    final dp2_nominal=dp_nominal) if have_hotWat
    "Subsystem for hot water production"
    annotation (Placement(transformation(extent={{-10,24},{10,44}})));
  Buildings.Fluid.Sources.Boundary_pT sinSHW(
    redeclare final package Medium=MediumBui,
    nPorts=1) if have_hotWat
    "Sink for service hot water"
    annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=180,origin={-60,60})));
  Buildings.Controls.OBC.CDL.Reals.Divide div1 if have_hotWat
    "Compute mass flow rate from load"
    annotation (Placement(transformation(extent={{-100,-50},{-80,-30}})));
  Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter gai(
    final k=cpBui_default) if have_hotWat
    "Times Cp"
    annotation (Placement(transformation(extent={{-120,-10},{-100,10}})));
  Buildings.Controls.OBC.CDL.Reals.MultiSum masFloHeaTot(
    final nin=2)
    "Compute district water mass flow rate used for heating service"
    annotation (Placement(transformation(extent={{270,-150},{290,-130}})));
  Modelica.Blocks.Sources.Constant zer(
    final k=0) if not have_hotWat
    "Replacement variable"
    annotation (Placement(transformation(extent={{140,350},{160,370}})));
  Buildings.Fluid.Sensors.TemperatureTwoPort senTHeaWatRet(
    redeclare final package Medium=MediumBui,
    final allowFlowReversal=allowFlowReversalBui,
    final m_flow_nominal=mHeaWat_flow_nominal)
    "Heating water return temperature"
    annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=0,origin={20,300})));
  Buildings.Fluid.Sensors.TemperatureTwoPort senTChiWatRet(
    redeclare final package Medium=MediumBui,
    final allowFlowReversal=allowFlowReversalBui,
    final m_flow_nominal=mChiWat_flow_nominal)
    "Chilled water return temperature"
    annotation (Placement(transformation(extent={{-10,10},{10,-10}},rotation=0,origin={40,-120})));
  Buildings.Controls.OBC.CDL.Reals.Subtract delT if have_hotWat
    "Compute DeltaT needed on condenser side"
    annotation (Placement(transformation(extent={{-150,-10},{-130,10}})));
  Buildings.Fluid.Sensors.MassFlowRate senMasFloHeaWatPri(
    redeclare final package Medium=MediumBui,
    final allowFlowReversal=allowFlowReversalBui)
    "Primary heating water mass flow rate"
    annotation (Placement(transformation(extent={{30,270},{50,250}})));
  Buildings.Controls.OBC.CDL.Logical.TrueFalseHold enaSHW(
    trueHoldDuration=15*60) if have_hotWat
    "Enable SHW production"
    annotation (Placement(transformation(extent={{-140,70},{-120,90}})));
  Modelica.Blocks.Sources.Constant zer1(
    k=0) if not have_hotWat
    "Replacement variable"
    annotation (Placement(transformation(extent={{-40,-244},{-20,-224}})));
  Buildings.Controls.OBC.CDL.Reals.Add masFloHea
    "Service water mass flow rate for heating applications"
    annotation (Placement(transformation(extent={{-10,-10},{10,10}},rotation=-90,origin={0,-264})));
  Buildings.Controls.OBC.CDL.Reals.MultiSum PHeaTot(
    final nin=2)
    "Total power used for heating and hot water production"
    annotation (Placement(transformation(extent={{270,70},{290,90}})));
  Buildings.Controls.OBC.CDL.Reals.Subtract dTHHW
    "Heating hot water DeltaT"
    annotation (Placement(transformation(extent={{0,310},{-20,330}})));
  Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter capFloHHW(
    final k=cpBui_default) if have_varFloEva or have_varFloCon
    "Capacity flow rate"
    annotation (Placement(transformation(extent={{-220,310},{-200,330}})));
  Buildings.DHC.ETS.Combined.Controls.PrimaryVariableFlow conFloConHHW(
    final Q_flow_nominal=QHeaWat_flow_nominal,
    final dT_nominal=dT_nominal,
    final ratFloMin=ratFloMin,
    final cp=cpBui_default) if have_varFloCon
    "Mass flow rate control"
    annotation (Placement(transformation(extent={{-100,270},{-80,290}})));
  Buildings.Controls.OBC.CDL.Reals.Max priOve if have_varFloCon
    "Ensure primary overflow"
    annotation (Placement(transformation(extent={{-60,270},{-40,290}})));
  Buildings.Controls.OBC.CDL.Reals.Multiply loaHHW if have_varFloEva or have_varFloCon
    "Heating load"
    annotation (Placement(transformation(extent={{-140,270},{-120,290}})));
  Buildings.Controls.OBC.CDL.Reals.Subtract dTCHW
    "Chilled water DeltaT"
    annotation (Placement(transformation(extent={{-120,-220},{-140,-200}})));
  Buildings.Controls.OBC.CDL.Reals.Multiply loaCHW if have_varFloEva or have_varFloCon
    "Cooling load "
    annotation (Placement(transformation(extent={{-140,-280},{-120,-260}})));
  Buildings.Controls.OBC.CDL.Reals.MultiplyByParameter capFloCHW(
    final k=cpBui_default) if have_varFloEva or have_varFloCon
    "Capacity flow rate"
    annotation (Placement(transformation(extent={{-180,-286},{-160,-266}})));
  Buildings.DHC.ETS.Combined.Controls.PrimaryVariableFlow conFloConCHW(
    final Q_flow_nominal=QChiWat_flow_nominal,
    final dT_nominal=-dT_nominal,
    final ratFloMin=ratFloMin,
    final cp=cpSer_default) if have_varFloEva
    "Mass flow rate control"
    annotation (Placement(transformation(extent={{-100,-280},{-80,-260}})));
  Buildings.Controls.OBC.CDL.Reals.Max priOve1 if have_varFloCon
    "Ensure primary overflow"
    annotation (Placement(transformation(extent={{-60,-280},{-40,-260}})));
  Buildings.Fluid.Sources.Boundary_pT souColWat(
    redeclare final package Medium=MediumBui,
    use_T_in=true,
    nPorts=1) if have_hotWat
    "Source for cold water"
    annotation (Placement(transformation(extent={{-54,-52},{-34,-32}})));
  Buildings.DHC.ETS.BaseClasses.Junction bypChiWatSup(
    redeclare final package Medium=MediumBui,
    final m_flow_nominal=proChiWat.mEva_flow_nominal*{1,-1,-1})
    "Bypass cooling water (supply)"
    annotation (Placement(transformation(extent={{-10,10},{10,-10}},rotation=0,origin={104,-324})));
  Buildings.DHC.ETS.BaseClasses.Junction bypChiWatRet(
    redeclare final package Medium=MediumBui,
    final m_flow_nominal=proChiWat.mEva_flow_nominal*{1,-1,1})
    "Bypass cooling water (return)"
    annotation (Placement(transformation(extent={{10,-10},{-10,10}},rotation=90,origin={64,-250})));
  Buildings.Fluid.Sensors.MassFlowRate senMasFloChiWatPri(
    redeclare final package Medium=MediumBui,
    final allowFlowReversal=allowFlowReversalBui)
    "Primary cooling water mass flow rate"
    annotation (Placement(transformation(extent={{40,-314},{60,-334}})));
equation
  connect(PPumHeaTot.y,PPumTot.u[1])
    annotation (Line(points={{212,420},{216,420},{216,399.5},{218,399.5}},color={0,0,127}));
  connect(PPumCooTot.y,PPumTot.u[2])
    annotation (Line(points={{212,380},{216,380},{216,400.5},{218,400.5}},color={0,0,127}));
  connect(volMix_a.ports[1],swiFlo.port_bSup)
    annotation (Line(points={{-261.5,-360},{-6,-360},{-6,-370}},color={0,127,255}));
  connect(swiFlo.port_aRet,volMix_b.ports[1])
    annotation (Line(points={{6,-370},{6,-360},{258.5,-360}},color={0,127,255}));
  connect(PPumTot.y,PPum)
    annotation (Line(points={{242,400},{244,400},{244,-40},{320,-40}},color={0,0,127}));
  connect(ports_aHeaWat[1],senMasFloHeaWat.port_a)
    annotation (Line(points={{-300,260},{-250,260}},color={0,127,255}));
  connect(bypHeaWatSup.port_2,senTHeaWatSup.port_a)
    annotation (Line(points={{110,260},{130,260}},color={0,127,255}));
  connect(senTHeaWatSup.port_b,ports_bHeaWat[1])
    annotation (Line(points={{150,260},{300,260}},color={0,127,255}));
  connect(bypHeaWatRet.port_2,volHeaWatRet.ports[1])
    annotation (Line(points={{90,234},{80,234},{80,178.667}},color={0,127,255}));
  connect(bouHeaWat.ports[1],volHeaWatRet.ports[2])
    annotation (Line(points={{60,160},{60,180},{80,180}},color={0,127,255}));
  connect(ports_aChiWat[1],senMasFloChiWat.port_a)
    annotation (Line(points={{-300,200},{-280,200},{-280,-120},{-250,-120}},color={0,127,255}));
  connect(senTChiWatSup.port_b,ports_bChiWat[1])
    annotation (Line(points={{150,-280},{200,-280},{200,200},{300,200}},color={0,127,255}));
  connect(bypHeaWatRet.port_3,bypHeaWatSup.port_3)
    annotation (Line(points={{100,244},{100,250}},color={0,127,255}));
  connect(volHeaWatRet.ports[3],proHeaWat.port_a1)
    annotation (Line(points={{80,181.333},{80,180},{-20,180},{-20,220},{-10,220}},color={0,127,255}));
  connect(proHeaWat.port_b2,volMix_b.ports[3])
    annotation (Line(points={{-10,208},{-16,208},{-16,194},{259.5,194},{259.5,-360}},color={0,127,255}));
  connect(volMix_a.ports[3],proHeaWat.port_a2)
    annotation (Line(points={{-260.5,-360},{-260.5,200},{14,200},{14,208},{10,208}},color={0,127,255}));
  connect(enaHea.y,proHeaWat.uEna)
    annotation (Line(points={{-118,160},{-48,160},{-48,223},{-12,223}},color={255,0,255}));
  connect(THeaWatSupSet,proHeaWat.TSupSet)
    annotation (Line(points={{-320,40},{-200,40},{-200,217},{-12,217}},color={0,0,127}));
  connect(proHeaWat.PPum,PPumHeaTot.u[1])
    annotation (Line(points={{12,214},{172,214},{172,419.5},{188,419.5}},color={0,0,127}));
  connect(volMix_a.ports[4],proHotWat.port_a2)
    annotation (Line(points={{-258.5,-360},{-258.5,20},{14,20},{14,28},{10,28}},color={0,127,255}));
  connect(proHotWat.port_b2,volMix_b.ports[4])
    annotation (Line(points={{-10,28},{-16,28},{-16,12},{261.5,12},{261.5,-360}},color={0,127,255}));
  connect(THotWatSupSet,proHotWat.TSupSet)
    annotation (Line(points={{-320,-40},{-160,-40},{-160,37},{-12,37}},color={0,0,127}));
  connect(sinSHW.ports[1],proHotWat.port_b1)
    annotation (Line(points={{-50,60},{16,60},{16,40},{10,40}},color={0,127,255}));
  connect(gai.y,div1.u2)
    annotation (Line(points={{-98,0},{-80,0},{-80,-20},{-120,-20},{-120,-46},{-102,-46}},color={0,0,127}));
  connect(QReqHotWat_flow,div1.u1)
    annotation (Line(points={{-320,-120},{-290,-120},{-290,-34},{-102,-34}},color={0,0,127}));
  connect(masFloHeaTot.y,mHea_flow)
    annotation (Line(points={{292,-140},{320,-140}},color={0,0,127}));
  connect(proHotWat.mEva_flow,masFloHeaTot.u[2])
    annotation (Line(points={{12,31},{218,31},{218,-139.5},{268,-139.5}},color={0,0,127}));
  connect(zer.y,masFloHeaTot.u[2])
    annotation (Line(points={{161,360},{216,360},{216,-144},{268,-144},{268,-139.5}},color={0,0,127}));
  connect(proHotWat.PPum,PPumHeaTot.u[2])
    annotation (Line(points={{12,34},{176,34},{176,420},{188,420},{188,420.5}},color={0,0,127}));
  connect(proHeaWat.mEva_flow,masFloHeaTot.u[1])
    annotation (Line(points={{12,211},{220,211},{220,-140.5},{268,-140.5}},color={0,0,127}));
  connect(zer.y,PPumHeaTot.u[2])
    annotation (Line(points={{161,360},{174,360},{174,418},{188,418},{188,420.5}},color={0,0,127}));
  connect(senMasFloHeaWat.port_b,senTHeaWatRet.port_a)
    annotation (Line(points={{-230,260},{-220,260},{-220,300},{10,300}},color={0,127,255}));
  connect(senTHeaWatRet.port_b,bypHeaWatRet.port_1)
    annotation (Line(points={{30,300},{120,300},{120,234},{110,234}},color={0,127,255}));
  connect(senMasFloChiWat.port_b,senTChiWatRet.port_a)
    annotation (Line(points={{-230,-120},{30,-120}},color={0,127,255}));
  connect(delT.y,gai.u)
    annotation (Line(points={{-128,0},{-122,0}},color={0,0,127}));
  connect(TColWat,delT.u2)
    annotation (Line(points={{-320,-80},{-156,-80},{-156,-6},{-152,-6}},color={0,0,127}));
  connect(THotWatSupSet,delT.u1)
    annotation (Line(points={{-320,-40},{-160,-40},{-160,6},{-152,6}},color={0,0,127}));
  connect(proHeaWat.port_b1,senMasFloHeaWatPri.port_a)
    annotation (Line(points={{10,220},{-20,220},{-20,260},{30,260}},color={0,127,255}));
  connect(senMasFloHeaWatPri.port_b,bypHeaWatSup.port_1)
    annotation (Line(points={{50,260},{90,260}},color={0,127,255}));
  connect(port_aSerAmb,swiFlo.port_aSup)
    annotation (Line(points={{-300,-200},{-280,-200},{-280,-400},{-6,-400},{-6,-390}},color={0,127,255}));
  connect(swiFlo.port_bRet,port_bSerAmb)
    annotation (Line(points={{6,-390},{6,-400},{280,-400},{280,-200},{300,-200}},color={0,127,255}));
  connect(uHea,enaHea.u)
    annotation (Line(points={{-320,160},{-142,160}},color={255,0,255}));
  connect(uSHW,enaSHW.u)
    annotation (Line(points={{-320,80},{-142,80}},color={255,0,255}));
  connect(enaSHW.y,proHotWat.uEna)
    annotation (Line(points={{-118,80},{-114,80},{-114,43},{-12,43}},color={255,0,255}));
  connect(bouChiWat.ports[1],volChiWatRet.ports[1])
    annotation (Line(points={{50,-288},{64,-288},{64,-286.667},{76,-286.667}},color={0,127,255}));
  connect(zer1.y,masFloHea.u2)
    annotation (Line(points={{-19,-234},{-6,-234},{-6,-252}},color={0,0,127}));
  connect(proHotWat.mEva_flow,masFloHea.u2)
    annotation (Line(points={{12,31},{16,31},{16,-234},{-6,-234},{-6,-252}},color={0,0,127}));
  connect(proHeaWat.mEva_flow,masFloHea.u1)
    annotation (Line(points={{12,211},{20,211},{20,-246},{6,-246},{6,-252}},color={0,0,127}));
  connect(masFloHea.y,swiFlo.mPos_flow)
    annotation (Line(points={{0,-276},{0,-320},{-16,-320},{-16,-376},{-12,-376}},color={0,0,127}));
  connect(proHeaWat.PHea,PHeaTot.u[1])
    annotation (Line(points={{12,217},{240,217},{240,79.5},{268,79.5}},color={0,0,127}));
  connect(proHotWat.PHea,PHeaTot.u[2])
    annotation (Line(points={{12,37},{240,37},{240,80.5},{268,80.5}},color={0,0,127}));
  connect(zer.y,PHeaTot.u[2])
    annotation (Line(points={{161,360},{242,360},{242,78},{268,78},{268,80.5}},color={0,0,127}));
  connect(PHeaTot.y,PHea)
    annotation (Line(points={{292,80},{320,80}},color={0,0,127}));
  connect(senTHeaWatRet.T,dTHHW.u2)
    annotation (Line(points={{20,311},{20,314},{2,314}},color={0,0,127}));
  connect(senTHeaWatSup.T,dTHHW.u1)
    annotation (Line(points={{140,271},{140,326},{2,326}},color={0,0,127}));
  connect(senMasFloHeaWat.m_flow,capFloHHW.u)
    annotation (Line(points={{-240,271},{-240,320},{-222,320}},color={0,0,127}));
  connect(senMasFloHeaWat.m_flow,priOve.u1)
    annotation (Line(points={{-240,271},{-240,302},{-72,302},{-72,286},{-62,286}},color={0,0,127}));
  connect(conFloConHHW.m_flow,priOve.u2)
    annotation (Line(points={{-78,280},{-70,280},{-70,274},{-62,274}},color={0,0,127}));
  connect(priOve.y,proHeaWat.m1_flow)
    annotation (Line(points={{-38,280},{-24,280},{-24,214},{-12,214}},color={0,0,127}));
  connect(capFloHHW.y,loaHHW.u2)
    annotation (Line(points={{-198,320},{-180,320},{-180,274},{-142,274}},color={0,0,127}));
  connect(dTHHW.y,loaHHW.u1)
    annotation (Line(points={{-22,320},{-160,320},{-160,286},{-142,286}},color={0,0,127}));
  connect(loaHHW.y,conFloConHHW.loa)
    annotation (Line(points={{-118,280},{-102,280}},color={0,0,127}));
  connect(uCoo,proChiWat.uEna)
    annotation (Line(points={{-320,120},{-264,120},{-264,-344},{-138,-344},{-138,-345},{-12,-345}},color={255,0,255}));
  connect(volChiWatRet.ports[2],proChiWat.port_a2)
    annotation (Line(points={{76,-288},{76,-330},{10,-330}},color={0,127,255}));
  connect(proChiWat.PPum,PPumCooTot.u[1])
    annotation (Line(points={{12,-336},{22,-336},{22,22},{188,22},{188,380}},color={0,0,127}));
  connect(senTChiWatSup.T,dTCHW.u2)
    annotation (Line(points={{140,-269},{140,-216},{-118,-216}},color={0,0,127}));
  connect(senTChiWatRet.T,dTCHW.u1)
    annotation (Line(points={{40,-131},{40,-204},{-118,-204}},color={0,0,127}));
  connect(TChiWatSupSet,proChiWat.TSupSet)
    annotation (Line(points={{-320,0},{-268,0},{-268,-340},{-32,-340},{-32,-339},{-12,-339}},color={0,0,127}));
  connect(loaCHW.u2,capFloCHW.y)
    annotation (Line(points={{-142,-276},{-158,-276}},color={0,0,127}));
  connect(dTCHW.y,loaCHW.u1)
    annotation (Line(points={{-142,-210},{-152,-210},{-152,-264},{-142,-264}},color={0,0,127}));
  connect(senMasFloChiWat.m_flow,capFloCHW.u)
    annotation (Line(points={{-240,-131},{-240,-276},{-182,-276}},color={0,0,127}));
  connect(proChiWat.mCon_flow,swiFlo.mRev_flow)
    annotation (Line(points={{12,-333},{-22,-333},{-22,-384},{-12,-384}},color={0,0,127}));
  connect(loaCHW.y,conFloConCHW.loa)
    annotation (Line(points={{-118,-270},{-102,-270}},color={0,0,127}));
  connect(conFloConCHW.m_flow,priOve1.u1)
    annotation (Line(points={{-78,-270},{-68,-270},{-68,-264},{-62,-264}},color={0,0,127}));
  connect(senMasFloChiWat.m_flow,priOve1.u2)
    annotation (Line(points={{-240,-131},{-240,-300},{-68,-300},{-68,-276},{-62,-276}},color={0,0,127}));
  connect(priOve1.y,proChiWat.m2_flow)
    annotation (Line(points={{-38,-270},{-32,-270},{-32,-336},{-12,-336}},color={0,0,127}));
  connect(souColWat.ports[1],proHotWat.port_a1)
    annotation (Line(points={{-34,-42},{-28,-42},{-28,40},{-10,40}},color={0,127,255}));
  connect(TColWat,souColWat.T_in)
    annotation (Line(points={{-320,-80},{-68,-80},{-68,-38},{-56,-38}},color={0,0,127}));
  connect(div1.y,proHotWat.m1_flow)
    annotation (Line(points={{-78,-40},{-70,-40},{-70,34},{-12,34}},color={0,0,127}));
  connect(volMix_b.ports[2],proChiWat.port_a1)
    annotation (Line(points={{-259.5,-360},{-258,-360},{-258,-342},{-10,-342}},color={0,127,255}));
  connect(proChiWat.port_b1,volMix_a.ports[2])
    annotation (Line(points={{10,-342},{260.5,-342},{260.5,-360}},color={0,127,255}));
  connect(proChiWat.PHea,PCoo)
    annotation (Line(points={{12,-339},{112,-339},{112,-336},{252,-336},{252,40},{320,40}},color={0,0,127}));
  connect(proChiWat.mCon_flow,mCoo_flow)
    annotation (Line(points={{12,-333},{128,-333},{128,-330},{242,-330},{242,-180},{320,-180}},color={0,0,127}));
  connect(senTChiWatRet.port_b,bypChiWatRet.port_1)
    annotation (Line(points={{50,-120},{64,-120},{64,-240}},color={0,127,255}));
  connect(bypChiWatRet.port_2,volChiWatRet.ports[3])
    annotation (Line(points={{64,-260},{64,-286},{76,-286},{76,-289.333}},color={0,127,255}));
  connect(senMasFloChiWatPri.port_a,proChiWat.port_b2)
    annotation (Line(points={{40,-324},{-14,-324},{-14,-330},{-10,-330}},color={0,127,255}));
  connect(senTChiWatSup.port_a,bypChiWatSup.port_2)
    annotation (Line(points={{130,-280},{120,-280},{120,-324},{114,-324}},color={0,127,255}));
  connect(bypChiWatSup.port_1,senMasFloChiWatPri.port_b)
    annotation (Line(points={{94,-324},{60,-324}},color={0,127,255}));
  connect(bypChiWatRet.port_3,bypChiWatSup.port_3)
    annotation (Line(points={{74,-250},{104,-250},{104,-314}},color={0,127,255}));
  annotation (
    defaultComponentName="ets",
    Documentation(
      info="<html>
<p>
This model represents an energy transfer station as described in Sommer (2020).
</p>
<ul>
<li>
The cooling function is provided in a compressor-less mode by a heat exchanger
connected to the service line.
The chilled water is typically produced at high temperature and distributed
to radiant cooling systems, for instance at 19&deg;C.
</li>
<li>
The heating functions are provided by water-to-water heat pumps.
<ul>
<li>
By default the condenser and evaporator loops are operated
with variable mass flow rate, with a lower limit specified by the ratio
<code>ratFloMin</code>.
The model can also represent constant flow condenser and evaporator loops
by setting <code>have_varFloCon</code> and <code>have_varFloEva</code>
to <code>false</code>.
</li>
<li>
The evaporator water is supplied by mixing the flow rate from the direct connection
to the service line to the flow rate from the primary side of the cooling
heat exchanger.
The hydronic arrangement modeled in
<a href=\"modelica://Buildings.DHC.ETS.Combined.Subsystems.SwitchBox\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.SwitchBox</a>
ensures that the resulting fluid stream in the service line always flows
in the same direction.
</li>
<li>
The heating hot water is typically produced at low temperature,
for instance 40&deg;C.
</li>
</ul>
</li>
</ul>
<h4>Controls</h4>
<p>
Heating (resp. cooling) is enabled based on the input signal <code>uHea</code>
(resp. <code>uCoo</code>) which is held for <i>15</i> minutes, meaning that,
when enabled, the mode remains active for at least <i>15</i> minutes and,
when disabled, the mode cannot be enabled again for at least <i>15</i> minutes.
The heating and cooling enable signals should be computed externally based
on a schedule (to lock out the system during off-hours), ideally in conjunction
with the number of requests yielded by the terminal unit controllers, or any
other signal representative of the load.
</p>
<p>
When enabled,
</p>
<ul>
<li>
the heat pumps and the evaporator and condenser water pumps are controlled
based on the principles described in
<a href=\"modelica://Buildings.DHC.ETS.Combined.Subsystems.HeatPump\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Subsystems.HeatPump</a>.
The evaporator and condenser water mass flow rates are computed based on the
logic described in
<a href=\"modelica://Buildings.DHC.ETS.Combined.Controls.PrimaryVariableFlow\">
Buildings.Experimental.DHC.EnergyTransferStations.Combined.Controls.PrimaryVariableFlow</a>.
</li>
<li>
the cooling heat exchanger primary pump is modulated based on a PI control
loop tracking the chilled water supply temperature at the outlet of the heat exchanger
secondary side.
</li>
</ul>
<h4>Modeling considerations</h4>
<p>
There is a control volume at each of the two fluid ports that serve as inlet and outlet
of the heating and cooling systems. These approximate the dynamics
of the substation, and they also generally avoid nonlinear systems
of equations if multiple substations are connected to each other.
</p>
<h4>References</h4>
<p>
Sommer T., Sulzer M., Wetter M., Sotnikov A., Mennel S., Stettler C.
<i>The reservoir network: A new network topology for district heating
and cooling.</i>
Energy, Volume 199, 15 May 2020, 117418.
</p>
</html>",
      revisions="<html>
  <ul>
<li>
  April 11, 2025, by Nathan Moore:<br/>
  Model updated to include a chiller by Shadi Abdel-Haleem, and templatized for the GMT by Nathan Moore.
</li>
<li>
  Jun 12, 2024, by Julia Ho:<br/>
  Removed gain component from <code>heaFloConCHW.u2</code> in chilled water heat pump controls.<br/>
  Removed condition that <code>have_hotWat = true</code> from <code>toSub1</code> component for heating water heat pump controls.<br/>
</li>
  <li>
  Jun 11, 2024, by Julia Ho:<br/>
  Replaced chilled water heat exchanger with a heat pump.<br/>
  Added mass flow controls identical to heating water heat pump but with chilled water parameters.<br/>
</li>
<li>
May 17, 2023, by David Blum:<br/>
Assigned dp_nominal to <code>pum1HexChi</code>.<br/>
Corrected calculation of heat pump evaporator mass flow control.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/3379\">
issue 3379</a>.
</li>
<li>
February 23, 2021, by Antoine Gautier:<br/>
Refactored with subsystem models and partial ETS base class.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/1769\">
issue 1769</a>.
</li>
<li>
December 12, 2017, by Michael Wetter:<br/>
Removed call to <code>Modelica.Utilities.Files.loadResource</code>.<br/>
This is for
<a href=\"https://github.com/lbl-srg/modelica-buildings/issues/1097\">issue 1097</a>.
</li>
</ul>
</html>"),
    Diagram(
      coordinateSystem(
        extent={{-300,-420},{300,440}})),
    Icon(
      coordinateSystem(
        preserveAspectRatio=false,
        extent={{-300,-300},{300,300}}),
      graphics={
        Rectangle(
          extent={{-134,80},{6,-80}},
          lineColor={0,0,255},
          pattern=LinePattern.None,
          fillColor={95,95,95},
          fillPattern=FillPattern.Solid),
        Rectangle(
          extent={{-110,52},{-106,12}},
          lineColor={0,0,0},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Rectangle(
          extent={{-122,70},{-8,52}},
          lineColor={0,0,0},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Polygon(
          points={{-108,2},{-118,12},{-98,12},{-108,2}},
          lineColor={0,0,0},
          smooth=Smooth.None,
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Polygon(
          points={{-108,2},{-118,-10},{-98,-10},{-108,2}},
          lineColor={0,0,0},
          smooth=Smooth.None,
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Rectangle(
          extent={{-110,-10},{-106,-50}},
          lineColor={0,0,0},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Rectangle(
          extent={{-28,52},{-24,-50}},
          lineColor={0,0,0},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Rectangle(
          extent={{-122,-50},{-8,-68}},
          lineColor={0,0,0},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Ellipse(
          extent={{-48,24},{-4,-18}},
          lineColor={0,0,0},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Polygon(
          points={{-26,24},{-44,-8},{-8,-8},{-26,24}},
          lineColor={0,0,0},
          smooth=Smooth.None,
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Rectangle(
          extent={{-110,52},{-106,12}},
          lineColor={0,0,0},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Rectangle(
          extent={{-122,70},{-8,52}},
          lineColor={0,0,0},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Polygon(
          points={{-108,2},{-118,12},{-98,12},{-108,2}},
          lineColor={0,0,0},
          smooth=Smooth.None,
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Polygon(
          points={{-108,2},{-118,-10},{-98,-10},{-108,2}},
          lineColor={0,0,0},
          smooth=Smooth.None,
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Rectangle(
          extent={{-110,-10},{-106,-50}},
          lineColor={0,0,0},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Rectangle(
          extent={{-28,52},{-24,-50}},
          lineColor={0,0,0},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Rectangle(
          extent={{-122,-50},{-8,-68}},
          lineColor={0,0,0},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Ellipse(
          extent={{-48,24},{-4,-18}},
          lineColor={0,0,0},
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Polygon(
          points={{-26,24},{-44,-8},{-8,-8},{-26,24}},
          lineColor={0,0,0},
          smooth=Smooth.None,
          fillColor={255,255,255},
          fillPattern=FillPattern.Solid),
        Rectangle(
          extent={{-260,140},{260,-142}},
          lineColor={95,95,95})}));
end HeatPumpTrio;
{% endraw %}
