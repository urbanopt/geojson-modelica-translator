within {{project_name}}.Loads.{{model_name}};
model building
  "Building model with heating and cooling loads provided as time series"
  extends PartialBuilding(
    redeclare package Medium = MediumW,
    have_fan=false,
    have_eleHea=false,
    have_eleCoo=false,
    have_weaBus=false);

   package MediumW = Buildings.Media.Water
     "Source side medium";
   package MediumA = Buildings.Media.Air
     "Load side medium";
   parameter Boolean show_T= false
     "propagated parameter show_T";
   parameter String filNam="modelica://{{project_name}}/Loads/{{data['load_resources_path']}}/{{data['time_series']['filename']}}"
     "Library path of the file with thermal loads as time series";
   parameter Modelica.SIunits.Temperature T_aHeaWat_nominal(
     min=273.15, displayUnit="degC") = 273.15 + 40
     "Heating water inlet temperature at nominal conditions"
     annotation(Dialog(group="Nominal condition"));
   parameter Modelica.SIunits.Temperature T_bHeaWat_nominal=T_aHeaWat_nominal - 5
     "Heating water outlet temperature at nominal conditions"
     annotation(Dialog(group="Nominal condition"));
   parameter Modelica.SIunits.Temperature T_aChiWat_nominal=273.15 + 14
     "Chilled water inlet temperature at nominal conditions "
     annotation(Dialog(group="Nominal condition"));
   parameter Modelica.SIunits.Temperature T_bChiWat_nominal=T_aChiWat_nominal + 5
     "Chilled water outlet temperature at nominal conditions"
     annotation(Dialog(group="Nominal condition"));
   parameter Modelica.SIunits.Temperature T_aLoaHea_nominal(
     min=273.15, displayUnit="degC") = 273.15 + 20
     "Load side inlet temperature at nominal conditions in heating mode"
     annotation(Dialog(group="Nominal condition"));
   parameter Modelica.SIunits.Temperature T_aLoaCoo_nominal(
     min=273.15, displayUnit="degC") = 273.15 + 24
     "Load side inlet temperature at nominal conditions in cooling mode"
     annotation(Dialog(group="Nominal condition"));
   parameter Modelica.SIunits.MassFlowRate mLoaHea_flow_nominal(min=0) = 10
     "Load side mass flow rate at nominal conditions in heating mode"
     annotation(Dialog(group="Nominal condition"));
   parameter Modelica.SIunits.MassFlowRate mLoaCoo_flow_nominal=40
     "Load side mass flow rate at nominal conditions in cooling mode"
     annotation(Dialog(group="Nominal condition"));
   parameter Modelica.SIunits.TemperatureDifference delTBuiCoo=T_bChiWat_nominal- T_aChiWat_nominal
   "Nominal building supply and return chilled water temperature difference";

   parameter Modelica.SIunits.HeatFlowRate QCoo_flow_nominal(max=-Modelica.Constants.eps)=
     Buildings.Experimental.DistrictHeatingCooling.SubStations.VaporCompression.BaseClasses.getPeakLoad(
     string="#Peak space cooling load",
     filNam=Modelica.Utilities.Files.loadResource(filNam))
     "Design cooling heat flow rate (<=0)"
     annotation (Dialog(group="Design parameter"));
   parameter Modelica.SIunits.HeatFlowRate QHea_flow_nominal(min=Modelica.Constants.eps)=
     Buildings.Experimental.DistrictHeatingCooling.SubStations.VaporCompression.BaseClasses.getPeakLoad(
     string="#Peak space heating load",
     filNam=Modelica.Utilities.Files.loadResource(filNam))
     "Design heating heat flow rate (>=0)"
     annotation (Dialog(group="Design parameter"));
   parameter Modelica.SIunits.SpecificHeatCapacity cp_air=
     MediumA.specificHeatCapacityCp(MediumA.setState_pTX(
       p = MediumA.p_default,
       T = MediumA.T_default,
       X = MediumA.X_default))
     "Specific heat capacity of air at default state";
  {% raw %}
   Modelica.Blocks.Sources.CombiTimeTable loa(
     tableOnFile=true,
     tableName="tab1",
     fileName=Modelica.Utilities.Files.loadResource(filNam),
     y(each unit="W"),
     columns={2,3,4},
     smoothness=Modelica.Blocks.Types.Smoothness.LinearSegments,
     extrapolation=Modelica.Blocks.Types.Extrapolation.HoldLastPoint)
     "Reader for thermal loads (y[1] is cooling load, y[2] is heating load)"
     annotation (Placement(transformation(extent={{0,-10},{20,10}})));
   Buildings.Applications.DHC.Loads.Validation.BaseClasses.FanCoil2PipeHeating terUniHea(
     redeclare package Medium1 = MediumW,
     redeclare package Medium2 = MediumA,
     final QHea_flow_nominal=QHea_flow_nominal,
     final mLoaHea_flow_nominal=mLoaHea_flow_nominal,
     final T_aHeaWat_nominal=T_aHeaWat_nominal,
     final T_bHeaWat_nominal=T_bHeaWat_nominal,
     final T_aLoaHea_nominal=T_aLoaHea_nominal) "Heating terminal unit"
     annotation (Placement(transformation(extent={{70,-34},{90,-14}})));
   Buildings.Applications.DHC.Loads.FlowDistribution disFloHea(
     redeclare package Medium = MediumW,
     m_flow_nominal=terUniHea.mHeaWat_flow_nominal,
     have_pum=have_pum,
     dp_nominal(displayUnit="Pa") = 100000,
     nPorts_a1=1,
     nPorts_b1=1) "Heating water distribution system"
     annotation (Placement(transformation(extent={{120,-80},{140,-60}})));
   Buildings.Applications.DHC.Loads.FlowDistribution disFloCoo(
     redeclare package Medium = MediumW,
     m_flow_nominal=terUniCoo.mChiWat_flow_nominal,
     typDis=Buildings.Applications.DHC.Loads.Types.DistributionType.ChilledWater,
     have_pum=have_pum,
     dp_nominal=100000,
     nPorts_a1=1,
     nPorts_b1=1)
    "Chilled water distribution system"
     annotation (Placement(transformation(extent={{120,-120},{140,-100}})));
   Buildings.Controls.OBC.CDL.Continuous.MultiSum mulSum(nin=2) if have_pum
     annotation (Placement(transformation(extent={{212,68},{232,88}})));
   Buildings.Applications.DHC.Loads.Validation.BaseClasses.FanCoil2PipeCooling terUniCoo(
     redeclare package Medium1 = MediumW,
     redeclare package Medium2 = MediumA,
     final QHea_flow_nominal=QHea_flow_nominal,
     final QCoo_flow_nominal=QCoo_flow_nominal,
     final mLoaCoo_flow_nominal=mLoaCoo_flow_nominal,
     final T_aHeaWat_nominal=T_aHeaWat_nominal,
     final T_aChiWat_nominal=T_aChiWat_nominal,
     final T_bHeaWat_nominal=T_bHeaWat_nominal,
     final T_bChiWat_nominal=T_bChiWat_nominal,
     final T_aLoaHea_nominal=T_aLoaHea_nominal,
     final T_aLoaCoo_nominal=T_aLoaCoo_nominal) "Cooling terminal unit"
     annotation (Placement(transformation(extent={{70,10},{90,30}})));
   Buildings.Controls.OBC.CDL.Continuous.Sources.Constant minTSet(
      k=20 + 273.15,
      y(unit = "K", displayUnit = "degC"))
    "Minimum temperature setpoint"
     annotation (Placement(transformation(extent={{-60,20},{-40,40}})));
   Buildings.Controls.OBC.CDL.Continuous.Sources.Constant maxTSet(
       k=24 + 273.15,
       y(unit="K",displayUnit="degC"))
    "Maximum temperature setpoint"
     annotation (Placement(transformation(extent={{-60,60},{-40,80}})));
{% endraw %}
{% raw %}
equation
  if have_heaLoa then
    connect(disFloHea.port_b, secHeaRet[1]) annotation (Line(points={{140,-70},{240,
          -70},{240,32},{300,32}}, color={0,127,255}));
    connect(disFloHea.port_a, secHeaSup[1]) annotation (Line(points={{120,-70},{-242,
          -70},{-242,32},{-300,32}}, color={0,127,255}));
  end if;
  if have_cooLoa then
    connect(disFloCoo.port_b, secCooRet[1]) annotation (Line(points={{140,-110},{252,
          -110},{252,-30},{300,-30}}, color={0,127,255}));
    connect(disFloCoo.port_a, secCooSup[1]) annotation (Line(points={{120,-110},{-280,
          -110},{-280,-30},{-300,-30}}, color={0,127,255}));
  end if;
  connect(terUniHea.port_bHeaWat, disFloHea.ports_a1[1]) annotation (Line(
        points={{90,-32.3333},{90,-32},{146,-32},{146,-64},{140,-64}}, color={0,
          127,255}));
  connect(disFloHea.ports_b1[1],terUniHea.port_aHeaWat) annotation (Line(
        points={{120,-64},{64,-64},{64,-32.3333},{70,-32.3333}}, color={0,127,255}));
  connect(terUniHea.mReqHeaWat_flow, disFloHea.mReq_flow[1]) annotation (Line(
        points={{90.8333,-27.3333},{92,-27.3333},{92,-28},{100,-28},{100,-74},{119,
          -74}}, color={0,0,127}));
  connect(terUniCoo.mReqChiWat_flow, disFloCoo.mReq_flow[1]) annotation (Line(
        points={{90.8333,15},{108,15},{108,-114},{119,-114}}, color={0,0,127}));
  connect(disFloHea.QActTot_flow, QHea_flow) annotation (Line(points={{141,-76},
          {260,-76},{260,280},{320,280}}, color={0,0,127}));
  connect(disFloCoo.QActTot_flow, QCoo_flow) annotation (Line(points={{141,-116},
          {268,-116},{268,240},{320,240}}, color={0,0,127}));
 if have_pum then
  connect(mulSum.y, PPum) annotation (Line(points={{234,78},{308,78},{308,80},{320,
          80}}, color={0,0,127}));
  connect(disFloHea.PPum, mulSum.u[1]) annotation (Line(points={{141,-78},{176,-78},
          {176,79},{210,79}}, color={0,0,127}));
  connect(disFloCoo.PPum, mulSum.u[2]) annotation (Line(points={{141,-118},{180,
          -118},{180,77},{210,77}}, color={0,0,127}));
 end if;
  connect(loa.y[1], terUniCoo.QReqCoo_flow) annotation (Line(points={{21,0},{46,
          0},{46,16.5},{69.1667,16.5}},       color={0,0,127}));
  connect(loa.y[2], terUniHea.QReqHea_flow) annotation (Line(points={{21,0},{46,
          0},{46,-25.6667},{69.1667,-25.6667}},
                                      color={0,0,127}));
  connect(maxTSet.y, terUniCoo.TSetCoo) annotation (Line(points={{-38,70},{48,70},
          {48,23.3333},{69.1667,23.3333}}, color={0,0,127}));
  connect(minTSet.y, terUniHea.TSetHea) annotation (Line(points={{-38,30},{40,30},
          {40,-19},{69.1667,-19}},
                                 color={0,0,127}));
  connect(terUniCoo.port_bChiWat, disFloCoo.ports_a1[1]) annotation (Line(
        points={{90,13.3333},{160,13.3333},{160,-104},{140,-104}}, color={0,127,
          255}));
  connect(terUniCoo.port_aChiWat, disFloCoo.ports_b1[1]) annotation (Line(
        points={{70,13.3333},{60,13.3333},{60,-104},{120,-104}}, color={0,127,255}));
{% endraw %}
{% raw %}
   annotation (
     Diagram(coordinateSystem(extent={{-300,-300},{300,300}})),
     Icon(coordinateSystem(extent={{-300,-300},{300,300}})),
     Documentation(info="<html>
   <p>
    This is a simplified building model where the space heating and cooling loads
    are provided as time series.
   </p>
   <p>
    The heating and cooling loads are computed with a four-pipe
    fan coil unit model derived from
    <a href=\"modelica://Buildings.Applications.DHC.Loads.BaseClasses.PartialTerminalUnit\">
    Buildings.Applications.DHC.Loads.BaseClasses.PartialTerminalUnit</a>
    and connected to the room model by means of fluid ports.
    </p>
   </html>", revisions="<html>
   <ul><li>
   April 8, 2020: Nicholas Long<br/>
   Updated implementation and modified the documentation to handle template needed for GeoJSON to Modelica.
   </li>
   <li>
   February 21, 2020, by Antoine Gautier:<br/>
   First implementation.
   </li>
   </ul>
   </html>"));
   {% endraw %}
 end building;
