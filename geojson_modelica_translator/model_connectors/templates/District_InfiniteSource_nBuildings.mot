within Buildings.Applications.DHC.Loads.Examples;

{% raw %}
model District_InfiniteSource_nBuildings
  "Example illustrating the coupling of a building model to heating water and chilled water loops"
  extends Modelica.Icons.Example;
{% endraw %}

// keep weather file to be shared among buildings
{% raw %}
  package Medium1 = Buildings.Media.Water "Fluid in the pipes";
  Buildings.BoundaryConditions.WeatherData.ReaderTMY3 weaDat(
    calTSky=Buildings.BoundaryConditions.Types.SkyTemperatureCalculation.HorizontalRadiation,
    computeWetBulbTemperature=false,
    filNam=Modelica.Utilities.Files.loadResource(
    "modelica://Buildings/Resources/weatherdata/USA_CA_San.Francisco.Intl.AP.724940_TMY3.mos"))
    "Weather data reader"
    annotation (Placement(transformation(extent={{76,590},{56,610}})));
{% endraw %}

  parameter Integer nBuilding={{district_data['rc_buildings_count']}};

//set up RC buildings and their asociated components
{% for i in range( district_data['rc_buildings_count'] ) %}
  BaseClasses.BuildingRCZ6 bui_{{i}}(nPorts_a=2, nPorts_b=2) "Building"

    annotation (Placement(transformation(extent=
    {%raw%} {{ {%endraw%} {{160+i*0}}, {{480-i*10}} {%raw%} } {%endraw%}, {%raw%} { {%endraw%} {{220+i*0}}, {{560-i*10}} {%raw%} }}  ))); {%endraw%}


  Buildings.Fluid.Sources.Boundary_pT sinHeaWat_{{i}}
      {% raw %}
      (redeclare package Medium =
        Medium1, nPorts=1) "Sink for heating water" annotation (Placement(
        transformation(
        extent={{10,-10},{-10,10}},
        rotation=0,
        origin={286,392})));
       {% endraw %}

  Fluid.Sources.Boundary_pT supHeaWat_{{i}}
    {% raw %}
    ( redeclare package Medium = Medium1,
    use_T_in=true,
    nPorts=1) "Heating water supply" annotation (Placement(transformation(
        extent={{-10,-10},{10,10}},
        rotation=0,
        origin={126,392})));
    {% endraw %}

  Modelica.Blocks.Sources.RealExpression THeaWatSup_{{i}}
  (y=max(bui_{{i}}.terUni.T_aHeaWat_nominal))
  {% raw %}
    "Heating water supply temperature"
    annotation (Placement(transformation(extent={{56,386},{76,406}})));
  {% endraw %}

{% endfor %}

//set up input to district source
{% raw %}
  Modelica.Blocks.Sources.Trapezoid tra(
    amplitude=1.5,
    rising(displayUnit="h") = 10800,
    width(displayUnit="h") = 10800,
    falling(displayUnit="h") = 10800,
    period(displayUnit="h") = 43200,
    offset=273 + 3.5)
    "District supply temperature trapezoid signal"
    annotation (Placement(transformation(extent={{-596,558},{-576,578}})));
{% endraw %}

//set up district sink number-of-ports, == number of buildings
{% raw %}
  Fluid.Sources.Boundary_pT           sinDis(
    redeclare package Medium = Medium1,
    p=300000,
    T=287.15,
    nPorts= nBuilding )
    "District-side (primary) sink"
    annotation (Placement(transformation(extent={{516,566},{496,586}})));
{% endraw %}

//set up district source number-of-ports, == number of buildings
{% raw %}
  Fluid.Sources.Boundary_pT           souDis(
    redeclare package Medium = Medium1,
    p(displayUnit="Pa") = 300000 + 800,
    use_T_in=true,
    T=278.15,
    nPorts= nBuilding )
    "District (primary) source"
    annotation (Placement(transformation(extent={{-518,552},{-498,572}})));
{% endraw %}

{% raw %}
// keep the water massflow rate for both district and building side
  parameter Modelica.SIunits.MassFlowRate m1_flow_nominal = 0.5
    "Nominal mass flow rate of primary (district) district cooling side";

  parameter Modelica.SIunits.MassFlowRate m2_flow_nominal = 0.5
    "Nominal mass flow rate of secondary (building) district cooling side";
{% endraw %}

{% for i in range( district_data['rc_buildings_count'] ) %}
// set up the ETS and associated components
  EnergyTransferStations.CoolingIndirect    coo_{{i}}
  {% raw %}
  (redeclare package Medium = Medium1,
    m1_flow_nominal=m1_flow_nominal,
    m2_flow_nominal=m2_flow_nominal,
    dp1_nominal=500,
    dp2_nominal=500,
    Q_flow_nominal=18514,
    T_a1_nominal=278.15,
    T_a2_nominal=289.15,
    controllerType=Modelica.Blocks.Types.SimpleController.PI,
    k=0.1,
    Ti=40,
    yMax=1,
    yMin=0,
    initType=Modelica.Blocks.Types.InitPID.InitialOutput,
    yCon_start=0,
    reverseAction=true)
    "Indirect cooling ETS"
    {% endraw %}
    annotation (Placement(transformation(extent={%raw%} {{ {%endraw%}
    {{-160+i*0}}, {{486-i*10}} {%raw%} },{ {%endraw%} {{-126+i*0}}, {{530-i*10}} {%raw%} }}))); {% endraw %}

  Modelica.Blocks.Sources.Constant TSetCHWS_{{i}}  (k=273.15 + 7)
  {% raw %}
    "Setpoint temperature for building chilled water supply"
    annotation (Placement(transformation(extent={{-254,484},{-234,504}})));
  {% endraw %}

  Fluid.Sensors.TemperatureTwoPort           TDisSup_{{i}}
  {% raw %}
  (redeclare package Medium = Medium1,
    m_flow_nominal=m1_flow_nominal,
    T_start=278.15)
    "District-side (primary) supply temperature sensor"
    annotation (Placement(transformation(extent={{-200,554},{-180,574}})));
  {% endraw %}

  Fluid.Sensors.TemperatureTwoPort           TDisRet_{{i}}
  {% raw %}
  ( redeclare package Medium = Medium1,
    m_flow_nominal=m1_flow_nominal,
    T_start=287.15)
    "District-side (primary) return temperature sensor"
    annotation (Placement(transformation(extent={{-124,554},{-104,574}})));
  {% endraw %}

  Modelica.Blocks.Math.Add TApp_{{i}}(k2=-1) "Calculate approach temperature"
   {% raw %}
    annotation (Placement(transformation(extent={{-144,286},{-124,306}})));
   {% endraw %}

  Modelica.Blocks.Math.Add dTDis_{{i}}(k1=-1)
   {% raw %}
    "Calculate change in district temperature"
    annotation (Placement(transformation(extent={{-84,266},{-64,286}})));
   {% endraw %}

  Modelica.Blocks.Math.Add dTBui_{{i}}(k1=-1)
   {% raw %}
    "Calculate change in building temperature"
    annotation (Placement(transformation(extent={{-62,144},{-42,164}})));
   {% endraw %}

  Fluid.Movers.FlowControlled_m_flow           pumBui_{{i}}
  {% raw %}
  ( redeclare package Medium = Medium1,
    m_flow_nominal=m2_flow_nominal,
    inputType=Buildings.Fluid.Types.InputType.Constant,
    nominalValuesDefineDefaultPressureCurve=true,
    dp_nominal=6000)
    "Building-side (secondary) pump"
    {% endraw %}
    annotation (Placement(transformation(extent= {%raw%} {{  {%endraw%}
    {{-164}}, {{96-i*10}}  {%raw%} },{  {%endraw%} {{-184}}, {{116-i*10}}  {%raw%} }}))); {% endraw %}

  Fluid.Sensors.TemperatureTwoPort           TBuiRet_{{i}}
  {% raw %}
  ( redeclare package Medium = Medium1,
    m_flow_nominal=m2_flow_nominal,
    T_start=289.15)
    "Building-side (secondary) return temperature sensor"
    annotation (Placement(transformation(extent={{-104,96},{-124,116}})));
  {% endraw %}

  Fluid.Sensors.TemperatureTwoPort           TBuiSup_{{i}}
  {% raw %}
  ( redeclare package Medium = Medium1,
    m_flow_nominal=m2_flow_nominal,
    T_start=280.15)
    "Building-side (secondary) supply temperature sensor"
    annotation (Placement(transformation(extent={{-194,96},{-214,116}})));
  {% endraw %}

  Fluid.Sources.Boundary_pT           souBui_{{i}}
  {% raw %}
  ( redeclare package Medium = Medium1,
    nPorts=1,
    use_T_in=false,
    T=289.15)
    "Building (secondary) source (chilled water return)"

    annotation (Placement(transformation(extent=
    {%raw%} {{ {%endraw%}    {{-44+i*0}}, {{96-i*10}}
    {%raw%} },{ {%endraw%}  {{-64+i*0}},{{116-i*10}}
    {%raw%} }}))); {% endraw %}

  Fluid.Sources.Boundary_pT           sinBui_{{i}}
  {% raw %}
  ( redeclare package Medium = Medium1,
    use_T_in=false,
    T=280.15,
    nPorts=1)
    "Building (secondary) sink (chilled water supply)"
    annotation (Placement(transformation(extent={{-264,414},{-244,434}})));
  {% endraw %}

{% endfor %}


{% raw %}
equation
{% endraw %}
//connect rc buildings and weather-data
{% for i in range( district_data['rc_buildings_count'] ) %}
  connect(weaDat.weaBus, bui_{{i}}.weaBus)
  {% raw %}
  annotation (Line(
      points={{56,600},{188,600},{188,549.393},{195.097,549.393}},
      color={255,204,51},
      thickness=0.5));
  {% endraw %}
{% endfor %}

//connect buildings heat ports to infinite heating source/sink (default connection)
// because current ets only supports cooling. so just keep heating default.
{% for i in range( district_data['rc_buildings_count'] ) %}
  connect(supHeaWat_{{i}}.T_in, THeaWatSup_{{i}}.y)
  {% raw %}annotation (Line(points={{114,396},{77, 396}}, color={0,0,127})); {% endraw %}

  connect(supHeaWat_{{i}}.ports[1], bui_{{i}}.ports_a[1])

  {% raw %}
  annotation (Line(points={{136,392}, {158,392},{158,498.333},{166,498.333}},  color={0,127,255}));
  {% endraw %}

  connect(bui_{{i}}.ports_b[1], sinHeaWat_{{i}}.ports[1])
  {% raw %}
  annotation (Line(points={{224, 498.333},{258,498.333},{258,392},{276,392}},  color={0,127,255}));
  {% endraw %}

{% endfor %}

//connect building cooling ports to ets-building side
{% for i in range( district_data['rc_buildings_count'] ) %}
  connect(TBuiSup_{{i}}.port_b, bui_{{i}}.ports_a[2])
  {% raw %}annotation (Line(points={{-214,106}, {-226,106},{-226,66},{16,66},{16,185.267},{166,185.267}}, color={0,127,255}));
  {% endraw %}
  connect(bui_{{i}}.ports_b[2], TBuiRet_{{i}}.port_a)
  {% raw %}annotation (Line(points={{224, 185.267},{246,185.267},{246,192},{266,192},{266,324},{-20,324},{-20,
          82},{-72,82},{-72,106},{-104,106}},   color={0,127,255}));
  {% endraw %}
{% endfor %}

//keep district input value
{% raw %}
  connect(tra.y, souDis.T_in)
    annotation (Line(points={{-575,568},{-564,568},{-564,566},{-520,566}}, color={0,0,127}));
{% endraw %}

{% for i in range( district_data['rc_buildings_count'] ) %}
// connect district-source to ETS-district-source-sensor
  connect(souDis.ports[{{i+1}}], TDisSup_{{i}}.port_a)
    {%raw%}
    annotation (Line(points={{-498,565},{-232,565},{-232,564},{-200,564}}, color={0,127,255}));
    {% endraw %}
{% endfor %}


//connect district-sink to ETS-district-sink-sensor
{% for i in range( district_data['rc_buildings_count'] ) %}
 connect(TDisRet_{{i}}.port_b, sinDis.ports[{{i+1}}])
    {% raw %}
    annotation (Line(points={{-104,564},{-84,564},{-84,579},{496,579}}, color={0,127,255}));
    {% endraw %}
{% endfor %}


//connect ETS-district-source-sensor to ets-input-port-district-side
{% for i in range( district_data['rc_buildings_count'] ) %}
  connect(TDisSup_{{i}}.port_b, coo_{{i}}.port_a1)
  {% raw %} annotation (Line(points={{-180,564},{
          -176,564},{-176,521.2},{-166,521.2}},color={0,127,255}));
  {% endraw %}
{% endfor %}


//connect ETS-district-sink-sensor to ets-output-port-district-side
{% for i in range( district_data['rc_buildings_count'] ) %}
  connect(coo_{{i}}.port_b1, TDisRet_{{i}}. port_a)
  {% raw %}annotation (Line(points={{-126,521.2},{
          -128,521.2},{-128,564},{-124,564}},color={0,127,255}));
  {% endraw %}
{% endfor %}


//connect ETS-inlet-port-building-side to inlet-sensor-building-side
{% for i in range( district_data['rc_buildings_count'] ) %}
  connect(coo_{{i}}.port_a2, TBuiRet_{{i}}.port_b)
  {% raw %}annotation (Line(points={{-126,176.8},
          {-128,176.8},{-128,106},{-124,106}},    color={0,127,255}));
  {% endraw %}
{% endfor %}



//connect ets-inlet-sensor-building-side  to ets-boundary-source
{% for i in range( district_data['rc_buildings_count'] ) %}
  connect(TBuiRet_{{i}}.port_a, souBui_{{i}}.ports[1])
  {% raw %}
    annotation (Line(points={{-106,-220},{-66,-220}},  color={0,127,255}));
  {% endraw %}
{% endfor %}


//connect ETS-outlet-port-building-side to ets-pump
{% for i in range( district_data['rc_buildings_count'] ) %}
  connect(coo_{{i}}.port_b2, pumBui_{{i}}.port_a)
  {% raw %}
  annotation (Line(points={{-166,494.8},{-166,424},{-164,424}},color={0,127,255}));
  {% endraw %}
{% endfor %}

//connect ets-pump to ets-outlet-sensor-building-side
{% for i in range( district_data['rc_buildings_count'] ) %}
  connect(pumBui_{{i}}.port_b, TBuiSup_{{i}}.port_a)
    {% raw %}
    annotation (Line(points={{-184,424},{-194,424}},color={0,127,255}));
    {% endraw %}
{% endfor %}



// connect ets-outlet-sensor-building-side  to ets-boundary-sink
{% for i in range( district_data['rc_buildings_count'] ) %}
  connect(TBuiSup_{{i}}.port_b, sinBui_{{i}}.ports[1])
    {% raw %}
    annotation (Line(points={{-214,424},{-244,424}},color={0,127,255}));
    {% endraw %}
{% endfor %}


// connect ets and ets-setpoint
{% for i in range( district_data['rc_buildings_count'] ) %}
  connect(TSetCHWS_{{i}}.y, coo_{{i}}.TSet)
  {% raw %}
  annotation (Line(points={{-241,-474},{-208,-474},{-208,-460},{-178,-460}}, color={0,0,127}));
  {% endraw %}
{% endfor %}


//connect district-temperature-difference-checker
{% for i in range( district_data['rc_buildings_count'] ) %}
  connect(TDisRet_{{i}}.T, dTDis_{{i}}.u2)
    {% raw %}
    annotation (Line(points={{-114,575},{-114,588},{-86,588}}, color={0,0,127}));
    {% endraw %}

  connect(dTDis_{{i}}.u1, TDisSup_{{i}}.T)
    {% raw %}
    annotation (Line(points={{-86,600},{-190,600},{-190,575}}, color={0,0,127}));
    {% endraw %}

{% endfor %}


//connect approach-temperature-checker
{% for i in range( district_data['rc_buildings_count'] ) %}
  connect(TBuiSup_{{i}}.T, TApp_{{i}}.u1)
    {% raw %}
    annotation (Line(points={{-204,435},{-204,620},{-146,620}}, color={0,0,127}));
    {% endraw %}
  connect(TDisSup_{{i}}.T, TApp_{{i}}.u2)
    {% raw %}
    annotation (Line(points={{-190,575},{-190,608},{-146,608}}, color={0,0,127}));
    {% endraw %}
{% endfor %}


//connect building-temperature-difference-checker
{% for i in range( district_data['rc_buildings_count'] ) %}
  connect(TBuiRet_{{i}}.T, dTBui_{{i}}.u2)
    {% raw %}
    annotation (Line(points={{-114,435},{-114,466},{-64,466}}, color={0,0,127}));
    {% endraw %}
  connect(TBuiSup_{{i}}.T, dTBui_{{i}}.u1)
    {% raw %}
    annotation (Line(points={{-204,435},{-204,478},{-64,478}}, color={0,0,127}));
    {% endraw %}
{% endfor %}

{% raw %}
  annotation (
  Documentation(info="<html>
<p>
This example illustrates the use of
<a href=\"modelica://Buildings.Applications.DHC.Loads.BaseClasses.PartialBuilding\">
Buildings.Applications.DHC.Loads.BaseClasses.PartialBuilding</a>,
<a href=\"modelica://Buildings.Applications.DHC.Loads.BaseClasses.PartialTerminalUnit\">
Buildings.Applications.DHC.Loads.BaseClasses.PartialTerminalUnit</a>
and
<a href=\"modelica://Buildings.Applications.DHC.Loads.BaseClasses.FlowDistribution\">
Buildings.Applications.DHC.Loads.BaseClasses.FlowDistribution</a>
in a configuration with
</p>
<ul>
<li>
a six-zone building model based on a two-element reduced order model (from
GeoJSON export), and
</li>
<li>
secondary pumps.
</li>
</ul>
</html>",
revisions=
"<html>
<ul>
<li>
February 21, 2020, by Antoine Gautier:<br/>
First implementation.
</li>
<li>
Templated by Yanfei Li, 4/20/2020.
</li>
</ul>
</html>"),
  Diagram(
    coordinateSystem(preserveAspectRatio=false, extent={{-320,-140},{280,140}})),
    __Dymola_Commands(file=
        "Resources/Scripts/Dymola/Applications/DHC/Loads/Examples/CouplingRCZ6.mos"
        "Simulate and plot"),
    experiment(
      StopTime=604800,
      Tolerance=1e-06),
    Icon(coordinateSystem(extent={{-320,-140},{280,140}})));
{% endraw %}

{% raw %}
end District_InfiniteSource_nBuildings;
{% endraw %}
