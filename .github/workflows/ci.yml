name: CI

on:
  pull_request:
  push:

defaults:
  run:
    shell: bash

jobs:
  test:
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        # 3.9 does not work as of 2020-02-01
        python-version: [3.7]
        test_env: [python, precommit, docs]
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v2
      -
        name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      -
        name: Display system info
        run: |
          python -c "import sys; print(sys.version)"
          docker --version
          docker-compose --version
      -
        name: Set up Poetry
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
          # NOTE: Poetry won't be in PATH until following steps
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH
          $HOME/.poetry/bin/poetry install
      -
        name: Print Environment
        run: poetry --version
      -
        name: Install modelicafmt
        run: |
          RUNNER_SYSTEM=$(python -c 'import platform; print(platform.system())')
          curl -SLO "https://github.com/urbanopt/modelica-fmt/releases/download/v0.2-pr.2/modelica-fmt_0.2-pr.2_${RUNNER_SYSTEM}_x86_64.tar.gz"
          tar xzf modelica-fmt_0.2-pr.2_${RUNNER_SYSTEM}_x86_64.tar.gz
          chmod +x modelicafmt
          if [[ $RUNNER_SYSTEM == 'Linux' ]]; then
            sudo mv modelicafmt /usr/local/bin/
          else
            mv modelicafmt '/c/Program Files/'
          fi
      -
        name: Install MBL
        env:
          MATRIX_OS: ${{ matrix.os }}
        run: |
          if [[ "${MATRIX_OS}" == 'ubuntu-latest' ]]; then
            MODELICAPATH='/home/runner/work/modelica-buildings'
          else
            echo $GITHUB_WORKSPACE
            MODELICAPATH='/c/Program Files/modelica-buildings'
          fi
          git clone --single-branch --branch issue2204_gmt_mbl https://github.com/lbl-srg/modelica-buildings.git "${MODELICAPATH}"
          cd "${MODELICAPATH}"
          echo "Git branch is $(git branch)"
          # export MODELICAPATH for subsequent steps
          echo "MODELICAPATH=${MODELICAPATH}" >> $GITHUB_ENV
      -
        name: Tox ${{ matrix.test_env }}
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        run: |
          POSARGS=""
          if [ '${{ matrix.test_env }}' == 'python' ] && [ '${{ matrix.os }}' == 'windows-latest' ]; then
            # for windows, skip python tests that require simulation (currently broken)
            POSARGS="-- -m 'not simulation' ./tests"
          fi
          poetry run tox -e ${{ matrix.test_env }} ${POSARGS}
      -
        name: Coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
        if: ${{ matrix.os == 'ubuntu-latest' && matrix.test_env == 'python' }}
        run: |
          poetry run coveralls
      -
        name: Job Failed
        if: ${{ failure() }}
        run: |
          echo "Maybe these logs will help?"
          free -tm
          ls -alt $GITHUB_WORKSPACE
          echo "============================================ stdout.log ========================================="
          find $GITHUB_WORKSPACE -type f -name 'stdout.log' -print | while read filename; do
            echo "$filename"
            cat "$filename"
          done
