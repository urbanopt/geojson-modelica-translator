name: CI

on:
  push:
    # re-enable all branches until we start simulating again.
    # branches:
    #   - 'develop'
    #   - 'main'

defaults:
  run:
    shell: bash

# Cancel existing run if a new one is started
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  test:
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-20.04, windows-latest]
        python-version: ["3.8", "3.10"]
        test_env: [python, precommit, docs]
        mbl_branch: [maint_9.1.x]
        include:
          - os: ubuntu-20.04
            test_env: python
            mbl_branch: maint_9.1.x
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v3
      -
        name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      -
        name: Display system info
        run: |
          python -c "import sys; print(sys.version)"
          docker --version
          docker-compose --version
      -
        name: Install and configure Poetry
        uses: abatilo/actions-poetry@v2
        with:
          poetry-version: 1.2.2
      -
        name: Install dependencies with Poetry
        run: |
          poetry --version
          poetry install
          poetry update
      # -
      #   name: Save Optimica license to file
      #   if: matrix.os == 'ubuntu-20.04'
      #   shell: bash
      #   run: |
      #     mkdir -p /home/runner/modelon
      #     echo "#Please do not delete this comment line." > /home/runner/modelon/license.lic
      #     echo "${{ secrets.MODELON_LICENSE_FILE }}" >> /home/runner/modelon/license.lic
      -
        name: Install modelicafmt
        run: |
          RUNNER_SYSTEM=$(python -c 'import platform; print(platform.system())')
          curl -SLO "https://github.com/urbanopt/modelica-fmt/releases/download/v0.2-pr.2/modelica-fmt_0.2-pr.2_${RUNNER_SYSTEM}_x86_64.tar.gz"
          tar xzf modelica-fmt_0.2-pr.2_${RUNNER_SYSTEM}_x86_64.tar.gz
          chmod +x modelicafmt
          if [[ $RUNNER_SYSTEM == 'Linux' ]]; then
            sudo mv modelicafmt /usr/local/bin/
          else
            mv modelicafmt '/c/Program Files/'
          fi
      -
        name: Install MBL
        env:
          MATRIX_OS: ${{ matrix.os }}
          MBL_BRANCH: ${{ matrix.mbl_branch }}
        run: |
          if [[ "${MATRIX_OS}" == 'ubuntu-20.04' ]]; then
            MODELICAPATH='/home/runner/work/modelica-buildings'
          else
            echo $GITHUB_WORKSPACE
            MODELICAPATH='/c/Program Files/modelica-buildings'
          fi
          git clone --single-branch --branch ${MBL_BRANCH} https://github.com/lbl-srg/modelica-buildings.git "${MODELICAPATH}"
          cd "${MODELICAPATH}"
          echo "Git branch is $(git branch)"
          # export MODELICAPATH for subsequent steps
          echo "MODELICAPATH=${MODELICAPATH}" >> $GITHUB_ENV
      # #Don't build the container anymore, just have it pull from docker hub.
      # -
      #   name: Build Spawn Modelica Docker Container
      #   env:
      #     MODELON_MAC_ADDRESS: ${{ secrets.MODELON_MAC_ADDRESS }}
      #   run: |
      #     cd geojson_modelica_translator/modelica/lib/runner
      #     docker-compose build
      -
        name: Run PyTest
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
          # MODELON_MAC_ADDRESS: ${{ secrets.MODELON_MAC_ADDRESS }}
          # MODELON_LICENSE_PATH: /home/runner/modelon
        run: |
          if [ '${{ matrix.test_env }}' == 'python' ]; then
            poetry run pytest --doctest-modules -v --cov-report term-missing --cov . -m 'not simulation and not compilation' ./tests
          fi
      - name: Run pre-commit
        uses: pre-commit/action@v3.0.0
        with:
          extra_args: --all-files
      - name: Build docs
        run: |
          if [ '${{ matrix.test_env }}' == 'docs' ]; then
            cd docs
            poetry run make html
          fi
      -
        name: Coveralls
        env:
          COVERALLS_REPO_TOKEN: ${{ secrets.COVERALLS_REPO_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        if: ${{ matrix.os == 'ubuntu-20.04' && matrix.test_env == 'python' && matrix.mbl_branch == 'maint_9.1.x' }}
        run: |
          poetry run coveralls
      -
        name: Job Failed
        if: ${{ failure() }}
        run: |
          echo "Maybe these logs will help?"
          ls -alt $GITHUB_WORKSPACE
          find $GITHUB_WORKSPACE -type f -name 'stdout.log' -print | while read filename; do
            echo "============================================ stdout.log ========================================="
            echo "$filename"
            cat "$filename"
          done
