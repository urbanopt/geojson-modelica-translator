name: CI

on:
  pull_request:
  push:

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        # 3.9 does not work as of 2020-02-01
        python-version: [3.7]
        test_env: [python, precommit, docs]
    steps:
      - uses: actions/checkout@v2
      -
        name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      -
        name: Display system info
        run: |
          python -c "import sys; print(sys.version)"
          docker --version
          docker-compose --version
      -
        name: Set up Poetry
        run: |
          curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python -
          # NOTE: Poetry won't be in PATH until following steps
          echo "$HOME/.poetry/bin" >> $GITHUB_PATH
          $HOME/.poetry/bin/poetry install
      -
        name: Print Environment
        run: poetry --version
      -
        name: Install dependencies
        env:
          MODELICAPATH: /home/runner/work/modelica-buildings
        run: |
          # Install modelicafmt (hard code the version for now)
          curl -SLO https://github.com/urbanopt/modelica-fmt/releases/download/v0.1-pr.3/modelica-fmt_0.1-pr.3_Linux_x86_64.tar.gz
          tar xzf modelica-fmt_0.1-pr.3_Linux_x86_64.tar.gz
          chmod +x modelicafmt
          sudo mv modelicafmt /usr/local/bin/
          # Install MBL
          git clone --single-branch --branch issue2204_gmt_mbl https://github.com/lbl-srg/modelica-buildings.git $MODELICAPATH
          cd $MODELICAPATH
          echo "Git branch is $(git branch)"
      -
        name: Tox ${{ matrix.test_env }}
        env:
          MODELICAPATH: /home/runner/work/modelica-buildings
        run: poetry run tox -e ${{ matrix.test_env }}
      -
        name: Job Failed
        if: ${{ failure() }}
        run: |
          echo "Maybe these logs will help?"
          free -tm
          ls -alt $GITHUB_WORKSPACE
          echo "============================================ stdout.log ========================================="
          find $GITHUB_WORKSPACE -type f -name 'stdout.log' -print | while read filename; do
            echo "$filename"
            cat "$filename"
          done
      -
        name: Store test output
        if: ${{ always() }}
        uses: actions/upload-artifact@v2
        with:
          name: test-output
          path: tests/model_connectors/output
